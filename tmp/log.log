Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  a stupid way to print a greeting 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] hex number: 0x48
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: (
[LEX] hex number: 0x6
[LEX] just whitespace: " "
[LEX] operator: <<
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] operator: |
[LEX] just whitespace: " "
[LEX] hex number: 0x5
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] hex number: 0x6C
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] hex number: 0x6c
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 0
[LEX] identifier: X6F
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] hex number: 0x2c
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 040
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: 'W'
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] hex number: 0x6f
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 0
[LEX] identifier: X72
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] hex number: 0x6c
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: (
[LEX] decimal number: 1
[LEX] just whitespace: " "
[LEX] operator: <<
[LEX] just whitespace: " "
[LEX] decimal number: 7
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 28
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 33
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  iteratve Fibonacci numbers 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: swap
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: _aux
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: _aux
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] identifier: a
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] multioperator: *
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] multioperator: *
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: _aux
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  swapping two values in a stupid way 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 666
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 777
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: swap
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] operator: &
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: swap
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] multioperator: *
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: ^=
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] multioperator: *
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: ^=
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] identifier: a
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] multioperator: *
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: ^=
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  swapping two values using xor 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 666
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 999
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: swap
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] operator: &
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] operator: !
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 42
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  nice triangle, while-style 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 9
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: while
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: >=
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] operator: !
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 42
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  nice triangle, for-style 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] special symbol: ;
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 42
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] keyword: break
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  nice triangle, for-style with breaks 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] special symbol: ;
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: >
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] keyword: break
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] operator: !
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 42
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  nice triangle, while-style with breaks 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 9
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: while
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 666
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: >=
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] keyword: else
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] keyword: break
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] operator: !
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 42
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  nice triangle, do-style 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 9
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: do
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: " "
[LEX] keyword: while
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: >=
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: flag
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] operator: !
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: flag
[LEX] just whitespace: " "
[LEX] operator: ||
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: foo
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] operator: ||
[LEX] just whitespace: " "
[LEX] operator: !
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 42
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] keyword: continue
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 32
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  nice triangle with inner blanks 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 9
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: first
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: do
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: line_of_stars
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: first
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: first
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: " "
[LEX] keyword: while
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: >=
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: minus
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] identifier: x
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  negative value 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 666
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 777
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: minus
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: minus
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: bar
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: bar
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 2
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  two function calls in a row 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 100
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: bar
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: bar
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: bar
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: else
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  factorial: linear recursion 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] just whitespace: " "
[LEX] special symbol: ?
[LEX] just whitespace: "
	"
[LEX] decimal number: 1
[LEX] just whitespace: " "
[LEX] special symbol: :
[LEX] just whitespace: "
	"
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  factorial: linear recursion + ternary operator 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "

"
[LEX] identifier: fa
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] just whitespace: " "
[LEX] special symbol: ?
[LEX] just whitespace: "
	"
[LEX] decimal number: 1
[LEX] just whitespace: " "
[LEX] special symbol: :
[LEX] just whitespace: "
	"
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: fb
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: fb
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] just whitespace: " "
[LEX] special symbol: ?
[LEX] just whitespace: "
	"
[LEX] decimal number: 1
[LEX] just whitespace: " "
[LEX] special symbol: :
[LEX] just whitespace: "
	"
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: fa
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  factorial: mutual linear recursion + ternary operator 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: fa
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: fac_iter
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: accum
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: accum
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: fac_iter
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: accum
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: fac_iter
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  factorial: tail recursion 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: >
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] multioperator: *
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] assignment: *=
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  factorial: tail recursion with pointer antics 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: result
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: result
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: result
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: result
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: >
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: result
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] identifier: p
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: result
[LEX] just whitespace: " "
[LEX] assignment: *=
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] multioperator: *
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: result
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  factorial: tail recursion with local variable 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: result
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: result
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: fac
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: result
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: result
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: fib
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: else
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: fib
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] identifier: fib
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  fibonacci: tree recursion a.k.a. rabbits gone wild 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 15
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: fib
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: fib
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 43
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 46
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: else
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: fib
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: fib
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 45
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  fibonacci: call/return graph 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 7
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: fib
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: fill_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: begin
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: begin
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: print_comma
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 44
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 32
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: print_comma
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  fill array and print its elements 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 10
[LEX] bracket: ]
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 20
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 5
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 7
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 9
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 8
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 6
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: fill_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 666
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: fill_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: fill_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 90
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: c
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 9
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: heap
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 100000
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: front
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: heap
[LEX] special symbol: ;
[LEX] just whitespace: "

"
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: ptr
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: front
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: front
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] keyword: sizeof
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] keyword: long
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: ptr
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: fill_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: begin
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: begin
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: print_comma
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 44
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 32
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: print_comma
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  lousy malloc 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: fill_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 666
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: fill_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: fill_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 90
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: heap
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 100000
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: front
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: heap
[LEX] special symbol: ;
[LEX] just whitespace: "

"
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: ptr
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: front
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: front
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] keyword: sizeof
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] keyword: long
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: ptr
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  simple lisp-style pair manipulation 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 20
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 30
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: heap
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 100000
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: front
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: heap
[LEX] special symbol: ;
[LEX] just whitespace: "

"
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: ptr
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: front
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: front
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] keyword: sizeof
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] keyword: long
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: ptr
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 3
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: pairp
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: value
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  elements with manifested types 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: value
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: value
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: value
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: heap
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 100000
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: front
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: heap
[LEX] special symbol: ;
[LEX] just whitespace: "

"
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: ptr
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: front
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: front
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] keyword: sizeof
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] keyword: long
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: ptr
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 3
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: pairp
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: value
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: prt
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] operator: !
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 40
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 41
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] operator: !
[LEX] just whitespace: " "
[LEX] identifier: pairp
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: value
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 40
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: prt
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] operator: &&
[LEX] just whitespace: " "
[LEX] identifier: pairp
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 32
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: prt
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: else
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 32
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 46
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 32
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: prt
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 41
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: elem
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] identifier: prt
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: elem
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  fancy printer 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: heap
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 100000
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: front
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: heap
[LEX] special symbol: ;
[LEX] just whitespace: "

"
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: ptr
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: front
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: front
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] keyword: sizeof
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] keyword: long
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: ptr
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 3
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: pairp
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: lalloc
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: new
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: new
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: value
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: prt
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] operator: !
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 40
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 41
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] operator: !
[LEX] just whitespace: " "
[LEX] identifier: pairp
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: value
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 40
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: prt
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] operator: &&
[LEX] just whitespace: " "
[LEX] identifier: pairp
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 32
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: prt
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: else
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 32
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 46
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 32
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: prt
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 41
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: elem
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] identifier: prt
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: elem
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: append
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] just whitespace: " "
[LEX] special symbol: ?
[LEX] just whitespace: "
	"
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] special symbol: :
[LEX] just whitespace: "
	"
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: append
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: mapcons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: elem
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] just whitespace: " "
[LEX] special symbol: ?
[LEX] just whitespace: "
	"
[LEX] decimal number: 0
[LEX] just whitespace: " "
[LEX] special symbol: :
[LEX] just whitespace: "
	"
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: elem
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: mapcons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: elem
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: power
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: power
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cdr
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: append
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: mapcons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: car
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: else
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  power sets 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: power
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: power
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: power
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_elem
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: power
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: cons
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: num
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 3
[LEX] bracket: )
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ','
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ' '
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: bubble_sort
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: swapped
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: do
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: swapped
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] operator: >
[LEX] just whitespace: " "
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
		"
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: ^=
[LEX] just whitespace: " "
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
		"
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: ^=
[LEX] just whitespace: " "
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
		"
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: ^=
[LEX] just whitespace: " "
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
		"
[LEX] identifier: swapped
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: " "
[LEX] keyword: while
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: swapped
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  bubble sort array 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] decimal number: 8
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 5
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 8
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 9
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 6
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 8
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 9
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 5
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] decimal number: 9
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 8
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 7
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 6
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 5
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: bubble_sort
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: bubble_sort
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 15
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 15
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: bubble_sort
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: c
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: c
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: size
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ','
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ' '
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: swap
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: j
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: j
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: foo
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: partition
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: r
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: r
[LEX] bracket: ]
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: j
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] identifier: r
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: j
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: swap
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: swap
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: r
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: quick_sort_rec
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: r
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: r
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: q
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: partition
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: r
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: quick_sort_rec
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: q
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: quick_sort_rec
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: q
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: r
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: quick_sort
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] identifier: quick_sort_rec
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  quick sort array 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] decimal number: 8
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 5
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 8
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 9
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 6
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 8
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 9
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 5
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] decimal number: 9
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 8
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 7
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 6
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 5
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: quick_sort
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: quick_sort
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 15
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 15
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: quick_sort
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: c
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_array
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: c
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  arithmetic and relational operators 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] multioperator: +
[LEX] decimal number: 20
[LEX] multioperator: *
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] multioperator: *
[LEX] decimal number: 20
[LEX] multioperator: +
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 5
[LEX] operator: <<
[LEX] decimal number: 6
[LEX] multioperator: +
[LEX] decimal number: 7
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: (
[LEX] decimal number: 5
[LEX] operator: <<
[LEX] decimal number: 6
[LEX] bracket: )
[LEX] multioperator: +
[LEX] decimal number: 7
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 50000
[LEX] operator: >>
[LEX] decimal number: 6
[LEX] multioperator: *
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: (
[LEX] decimal number: 50000
[LEX] operator: >>
[LEX] decimal number: 6
[LEX] bracket: )
[LEX] multioperator: *
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] operator: %
[LEX] decimal number: 3
[LEX] multioperator: +
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] operator: %
[LEX] decimal number: 3
[LEX] multioperator: *
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] multioperator: *
[LEX] decimal number: 10
[LEX] operator: %
[LEX] decimal number: 3
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 66
[LEX] multioperator: *
[LEX] decimal number: 10
[LEX] assignment: =
[LEX] assignment: =
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 66
[LEX] multioperator: *
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] assignment: =
[LEX] assignment: =
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  arithmetic, logic and bitwise operators 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 1
[LEX] operator: |
[LEX] decimal number: 2
[LEX] operator: |
[LEX] decimal number: 3
[LEX] operator: |
[LEX] decimal number: 4
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] hex number: 0xffff
[LEX] operator: &
[LEX] hex number: 0xff00
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 12345
[LEX] operator: ^
[LEX] decimal number: 678
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 891010
[LEX] operator: |
[LEX] decimal number: 12345
[LEX] operator: ^
[LEX] decimal number: 678
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: (
[LEX] decimal number: 891010
[LEX] operator: |
[LEX] decimal number: 12345
[LEX] bracket: )
[LEX] operator: ^
[LEX] decimal number: 678
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 891010
[LEX] operator: |
[LEX] decimal number: 12345
[LEX] operator: ^
[LEX] decimal number: 678
[LEX] operator: <<
[LEX] decimal number: 9
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 891010
[LEX] operator: |
[LEX] bracket: (
[LEX] decimal number: 12345
[LEX] operator: ^
[LEX] decimal number: 678
[LEX] bracket: )
[LEX] operator: <<
[LEX] decimal number: 9
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: (
[LEX] decimal number: 891010
[LEX] operator: |
[LEX] bracket: (
[LEX] decimal number: 12345
[LEX] operator: ^
[LEX] decimal number: 678
[LEX] bracket: )
[LEX] bracket: )
[LEX] operator: <<
[LEX] decimal number: 9
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] multioperator: +
[LEX] decimal number: 891010
[LEX] operator: |
[LEX] bracket: (
[LEX] decimal number: 12345
[LEX] operator: ^
[LEX] decimal number: 678
[LEX] bracket: )
[LEX] operator: <<
[LEX] decimal number: 9
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] operator: ~
[LEX] decimal number: 10
[LEX] multioperator: +
[LEX] decimal number: 891010
[LEX] operator: |
[LEX] bracket: (
[LEX] decimal number: 12345
[LEX] operator: ^
[LEX] decimal number: 678
[LEX] bracket: )
[LEX] operator: <<
[LEX] decimal number: 9
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] operator: ~
[LEX] decimal number: 10
[LEX] multioperator: +
[LEX] decimal number: 891010
[LEX] operator: |
[LEX] bracket: (
[LEX] decimal number: 12345
[LEX] operator: ^
[LEX] decimal number: 678
[LEX] bracket: )
[LEX] operator: <<
[LEX] decimal number: 9
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] operator: ~
[LEX] operator: ~
[LEX] decimal number: 123
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] operator: <
[LEX] decimal number: 20
[LEX] operator: &&
[LEX] decimal number: 40
[LEX] operator: <=
[LEX] decimal number: 40
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] multioperator: +
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] operator: <
[LEX] decimal number: 20
[LEX] operator: &&
[LEX] decimal number: 40
[LEX] operator: >=
[LEX] decimal number: 40
[LEX] operator: ||
[LEX] decimal number: 333
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  assignment 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 30
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: d
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: e
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: *=
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] multioperator: +
[LEX] decimal number: 2
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: <<=
[LEX] just whitespace: " "
[LEX] decimal number: 16
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] operator: /
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 5
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: -=
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] multioperator: --
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] multioperator: --
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] identifier: a
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: d
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: e
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: c
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: d
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: e
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  ternary operator 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] special symbol: ?
[LEX] decimal number: 20
[LEX] special symbol: :
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] assignment: =
[LEX] assignment: =
[LEX] decimal number: 10
[LEX] special symbol: ?
[LEX] decimal number: 20
[LEX] special symbol: :
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] assignment: =
[LEX] assignment: =
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] special symbol: ?
[LEX] decimal number: 20
[LEX] special symbol: :
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] assignment: =
[LEX] assignment: =
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] special symbol: ?
[LEX] decimal number: 20
[LEX] special symbol: :
[LEX] decimal number: 30
[LEX] bracket: )
[LEX] special symbol: ?
[LEX] decimal number: 40
[LEX] special symbol: :
[LEX] decimal number: 50
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] assignment: =
[LEX] assignment: =
[LEX] decimal number: 10
[LEX] special symbol: ?
[LEX] decimal number: 20
[LEX] special symbol: :
[LEX] decimal number: 30
[LEX] special symbol: ?
[LEX] decimal number: 40
[LEX] special symbol: :
[LEX] decimal number: 50
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a
[LEX] operator: !=
[LEX] decimal number: 10
[LEX] special symbol: ?
[LEX] decimal number: 20
[LEX] special symbol: :
[LEX] decimal number: 30
[LEX] special symbol: ?
[LEX] decimal number: 40
[LEX] special symbol: :
[LEX] decimal number: 50
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: maze
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
    "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "

"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: was_here
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1817
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: correct_path
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1817
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] identifier: int
[LEX] just whitespace: " "
[LEX] identifier: start_x
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 39
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: start_y
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 22
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] identifier: int
[LEX] just whitespace: " "
[LEX] identifier: end_x
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 39
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: end_y
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "

"
[LEX] identifier: walk
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: end_x
[LEX] just whitespace: " "
[LEX] operator: &&
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: end_y
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: correct_path
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 79
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: maze
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 79
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] just whitespace: " "
[LEX] operator: ||
[LEX] just whitespace: " "
[LEX] identifier: was_here
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 79
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: ]
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "  
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: was_here
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 79
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: walk
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] operator: ||
[LEX] just whitespace: "
	"
[LEX] identifier: walk
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] operator: ||
[LEX] just whitespace: "
	"
[LEX] identifier: walk
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] operator: ||
[LEX] just whitespace: "
	"
[LEX] identifier: walk
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: correct_path
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 79
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: solve
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 1817
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: was_here
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: correct_path
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: "
	"
[LEX] identifier: walk
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: start_x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: start_y
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: print_solution
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: j
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 23
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 79
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: maze
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 79
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] operator: !=
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
		"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: '#'
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] bracket: }
[LEX] just whitespace: "
	    "
[LEX] keyword: else
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
		"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: correct_path
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 79
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] bracket: ]
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
		    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: '+'
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
		"
[LEX] bracket: }
[LEX] just whitespace: "
		"
[LEX] keyword: else
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
		    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ' '
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
		"
[LEX] bracket: }
[LEX] just whitespace: "
	    "
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  primitive recursive maze solver 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] identifier: solve
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_solution
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  reference and dereference 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 888888888
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: b
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: c
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: d
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: a
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: b
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: d
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: c
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] multioperator: *
[LEX] identifier: b
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] multioperator: *
[LEX] multioperator: *
[LEX] identifier: c
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] multioperator: *
[LEX] multioperator: *
[LEX] multioperator: *
[LEX] identifier: d
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: b
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] multioperator: *
[LEX] identifier: c
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: d
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] multioperator: *
[LEX] identifier: d
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] multioperator: *
[LEX] multioperator: *
[LEX] identifier: d
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: helper
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: arg
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: foo
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: arg
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 111
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: bar
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: foo
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: bar
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  variable scope 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 111
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: helper
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 222
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: helper
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] decimal number: 100
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 200
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 300
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 400
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "

"
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: bar
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] decimal number: 100
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 200
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 300
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 400
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: return
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  global array vs local array allocated on stack 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 80
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ','
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ' '
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: foo
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ','
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ' '
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: bar
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] decimal number: 10
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ','
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ' '
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: bar
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: print_string
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: len
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: len
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  EXTRAS: string literals = arrays of long integers 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] identifier: print_string
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] start of string: "
[LEX] string constant: Hello, World!
[LEX] end of string: "
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 13
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_string
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] start of string: "
[LEX] string constant: Muhehe, Fubar
[LEX] end of string: "
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 13
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: fubar
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: {
[LEX] decimal number: 10
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 30
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 40
[LEX] bracket: }
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] multioperator: *
[LEX] bracket: (
[LEX] bracket: {
[LEX] decimal number: 10
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 20
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 30
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 40
[LEX] bracket: }
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] keyword: sizeof
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] keyword: long
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  EXTRAS: string and array literals as expressions 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] start of string: "
[LEX] string constant: Hello, World!
[LEX] end of string: "
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 0
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: fubar
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: pc
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: sp
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: prgm
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: stack
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 65536
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "

"
[LEX] identifier: print_stack
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "

    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: '['
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: sp
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: >
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ','
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] character: ' '
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] identifier: print_long
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: stack
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: " "
[LEX] identifier: stack
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: sp
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] identifier: pop1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: " "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] identifier: jrz1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: " "
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: stack
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: sp
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: " "
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] bracket: }
[LEX] just whitespace: " "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] identifier: add2
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: " "
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] identifier: mul2
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: " "
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] multioperator: *
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] identifier: leq2
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: y
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: " "
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] identifier: dup1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: " "
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] identifier: swap2
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: " "
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: y
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] identifier: rot3
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: y
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: z
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: " "
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: x
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: z
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: push1
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: y
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: eval
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: last
[LEX] special symbol: ;
[LEX] just whitespace: "

    "
[LEX] keyword: do
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_stack
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: last
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: prgm
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: pc
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: last
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: prgm
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: prgm
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] keyword: continue
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: last
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a1
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: stack
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] assignment: -=
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: prgm
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a1
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] keyword: continue
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: last
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a1
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: stack
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: a2
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: stack
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] assignment: -=
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: prgm
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: a2
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] keyword: continue
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
	"
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: last
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: a1
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: stack
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: a2
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: stack
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] bracket: ]
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: a3
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: stack
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] assignment: +=
[LEX] just whitespace: " "
[LEX] decimal number: 2
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] assignment: -=
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: prgm
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: a1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: a2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: a3
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] keyword: continue
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: " "
[LEX] keyword: while
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: last
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: run
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] identifier: prgm
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: pc
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: sp
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: eval
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  stack-based evaluation of expressions 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: p
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] multioperator: -
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: push1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 10
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] multioperator: -
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: push1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: swap2
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: dup1
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] multioperator: -
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: push1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: leq2
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] multioperator: -
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: jrz1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: pop1
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: dup1
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] multioperator: -
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: push1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: add2
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] decimal number: 3
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: rot3
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] decimal number: 2
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: mul2
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] multioperator: -
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: push1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: "
		 "
[LEX] multioperator: -
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] operator: &
[LEX] identifier: jrz1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] multioperator: -
[LEX] decimal number: 32
[LEX] bracket: }
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: run
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: p
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] just whitespace: "
"
[LEX] identifier: print_string
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: string
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: while
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_char
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] multioperator: *
[LEX] identifier: string
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] identifier: n
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: print_nl
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: swap
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: s
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: j
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: temp
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: s
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: s
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: s
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: j
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] identifier: s
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: j
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: temp
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: copy
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: array
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: >=
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: --
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: array
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: permute
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: string
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: k
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] keyword: if
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: k
[LEX] just whitespace: " "
[LEX] operator: >=
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: print_string
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: string
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] keyword: else
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: k
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	    "
[LEX] identifier: swap
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: string
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: k
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: copy
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: string
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	    "
[LEX] identifier: permute
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: string
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: k
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 1
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
	"
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: permutations
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: string
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] identifier: permute
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: string
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: n
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "

"
[LEX] identifier: main
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] bracket: )
[LEX] just whitespace: "
"
[LEX] bracket: {
[LEX] just whitespace: "
    "
[LEX] start of multi-line comment: /*
[LEX] multi-line comment's body:  array permutations 
[LEX] end of multi-line comment: */
[LEX] just whitespace: "
    "
[LEX] keyword: long
[LEX] just whitespace: " "
[LEX] identifier: s
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] decimal number: 1024
[LEX] bracket: ]
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] keyword: for
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] decimal number: 0
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] operator: <=
[LEX] just whitespace: " "
[LEX] decimal number: 3
[LEX] special symbol: ;
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: ++
[LEX] bracket: )
[LEX] just whitespace: " "
[LEX] bracket: {
[LEX] just whitespace: "
	"
[LEX] identifier: s
[LEX] just whitespace: " "
[LEX] bracket: [
[LEX] identifier: i
[LEX] bracket: ]
[LEX] just whitespace: " "
[LEX] assignment: =
[LEX] just whitespace: " "
[LEX] identifier: i
[LEX] just whitespace: " "
[LEX] multioperator: +
[LEX] just whitespace: " "
[LEX] decimal number: 65
[LEX] special symbol: ;
[LEX] just whitespace: "
    "
[LEX] bracket: }
[LEX] just whitespace: "
    "
[LEX] identifier: permutations
[LEX] just whitespace: " "
[LEX] bracket: (
[LEX] identifier: s
[LEX] special symbol: ,
[LEX] just whitespace: " "
[LEX] decimal number: 4
[LEX] bracket: )
[LEX] special symbol: ;
[LEX] just whitespace: "
"
[LEX] bracket: }
[LEX] just whitespace: "
"
[LEX] end of input
Done.
Running lexer (stdin): 
[LEX] operator: %
[LEX] just whitespace: "
"
[LEX] decimal number: 42
[LEX] just whitespace: " "
[LEX] identifier: C
[LEX] just whitespace: "
"
[LEX] just whitespace: "
"
[LEX] just whitespace: "

"
[LEX] end of input
Done.
